import h,{createTexture as c,createFramebuffer as n,createPlane as m}from"../utils/index.js";import E from"./Filter.js";import T from"./filters/Light/index.js";import F from"./filters/Color/index.js";import w from"./filters/FlipY.js";import B from"./filters/EdgeDetection/index.js";import x from"./filters/UnsharpMask/index.js";import R from"./filters/Pixelate.js";import b from"./filters/Palette/index.js";import p from"./filters/Dither/index.js";import D from"./filters/Blur/index.js";export class Renderer{constructor(r){this.canvas=r,this.source=void 0,this.gl=void 0,this.filters=[],this.debug=!0,this.frameBuffers=void 0,this.draw=h(()=>{console.time("renderer::draw");const{gl:t,source:f,filters:d,debug:l,frameBuffers:a}=this;if(!f)return;this.clear(t.drawingBufferWidth,t.drawingBufferHeight),this.drawSource();const g=d.filter(({enabled:s})=>s);l&&console.group("draw");for(const s of g){l&&console.time(s.name);for(let o=0;o<s.pass;o++){t.bindFramebuffer(t.FRAMEBUFFER,a[0].buffer),s.use();const u=t.getUniformLocation(s.program,"pass");t.uniform1f(u,o),t.drawArrays(t.TRIANGLE_STRIP,0,4),t.bindTexture(t.TEXTURE_2D,a[0].texture),s.clear(),[a[0],a[1]]=[a[1],a[0]]}l&&console.timeEnd(s.name)}l&&console.groupEnd(),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindTexture(t.TEXTURE_2D,a[0].texture),t.drawArrays(t.TRIANGLE_STRIP,0,4),console.timeEnd("renderer::draw")});const e=r.getContext("webgl",{antialias:!1,preserveDrawingBuffer:!0});if(!e)throw new Error("WebGL is not available");this.gl=e;const i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,m(),e.STATIC_DRAW)}registerFilter(r){const e=new r(this.gl);this.filters[e.name]=e,this.filters.push(e)}clear(r,e){const i=this.gl;i.viewport(0,0,r,e),i.clearColor(0,1,0,1),i.clear(i.COLOR_BUFFER_BIT),i.disable(i.BLEND),i.disable(i.DEPTH_TEST),i.disable(i.DITHER)}drawSource(){const{gl:r,source:e}=this;r.activeTexture(r.TEXTURE0);const i=c(r,e.width,e.height);r.bindTexture(r.TEXTURE_2D,i),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e),r.activeTexture(r.TEXTURE1),r.bindTexture(r.TEXTURE_2D,i),r.activeTexture(r.TEXTURE0)}setSource(r){const{gl:e,canvas:i,frameBuffers:t}=this;if(this.source=r,i.width=r.width,i.height=r.height,t)for(const f of t)e.deleteFramebuffer(f.buffer),e.deleteTexture(f.texture);this.frameBuffers=[n(e,r.width,r.height),n(e,r.width,r.height)],this.draw()}}export function createEditor(r){const e=new Renderer(r);return e.registerFilter(E),e.registerFilter(T),e.registerFilter(F),e.registerFilter(D),e.registerFilter(x),e.registerFilter(B),e.registerFilter(R),e.registerFilter(p),e.registerFilter(b),e.registerFilter(w),e}
