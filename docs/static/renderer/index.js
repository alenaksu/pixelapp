import{createTexture as n,createFramebuffer as f}from"./utils.js";import g from"./Filter.js";import h from"./filters/Light/index.js";import d from"./filters/Color/index.js";import u from"./filters/FlipY.js";import c from"./filters/EdgeDetection/index.js";import m from"./filters/UnsharpMask/index.js";import T from"./filters/Pixelate.js";import E from"./filters/Palette/index.js";import w from"./filters/Dither/index.js";export class Renderer{constructor(e){this.canvas=e,this.source=void 0,this.gl=void 0,this.filters=[],this.debug=!1;const t=e.getContext("webgl",{antialias:!1});if(!t)throw new Error("WebGL is not available");this.gl=t;const r=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,r);const a=[-1,1,1,1,-1,-1,1,-1];t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),this.registerFilter(g),this.registerFilter(h),this.registerFilter(d),this.registerFilter(m),this.registerFilter(c),this.registerFilter(w),this.registerFilter(T),this.registerFilter(E),this.registerFilter(u)}registerFilter(e){const t=new e(this.gl);this.filters[t.name]=t,this.filters.push(t)}clear(e,t){const r=this.gl;r.viewport(0,0,e,t),r.clearColor(0,1,0,1),r.clear(r.COLOR_BUFFER_BIT),r.disable(r.BLEND),r.disable(r.DEPTH_TEST),r.disable(r.DITHER)}drawSource(){const{gl:e,source:t}=this;e.activeTexture(e.TEXTURE0);const r=n(e,t.width,t.height);e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,r),e.activeTexture(e.TEXTURE0)}draw(){const{gl:e,source:t,filters:r,debug:a}=this;if(!t)return;this.clear(e.drawingBufferWidth,e.drawingBufferHeight);let s=[f(e,t.width,t.height),f(e,t.width,t.height)];this.drawSource();const o=r.filter(({enabled:i})=>i);a&&console.group("draw");for(const i of o){a&&console.time(i.name);for(let l=0;l<i.pass;l++)e.bindFramebuffer(e.FRAMEBUFFER,s[0].buffer),i.use(),e.drawArrays(e.TRIANGLE_STRIP,0,4),e.bindTexture(e.TEXTURE_2D,s[0].texture),i.clear(),[s[0],s[1]]=[s[1],s[0]];a&&console.timeEnd(i.name)}a&&console.groupEnd(),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindTexture(e.TEXTURE_2D,s[0].texture),e.drawArrays(e.TRIANGLE_STRIP,0,4);for(const i of s)e.deleteFramebuffer(i.buffer),e.deleteTexture(i.texture)}setSource(e){this.source=e,this.canvas.width=e.width,this.canvas.height=e.height,this.draw()}}export function create(e){return new Renderer(e)}
