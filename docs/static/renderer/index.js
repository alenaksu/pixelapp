import{createTexture as g,createFramebuffer as o}from"./utils.js";import h from"./Filter.js";import d from"./filters/Light/index.js";import u from"./filters/Color/index.js";import c from"./filters/FlipY.js";import m from"./filters/EdgeDetection/index.js";import T from"./filters/UnsharpMask/index.js";import E from"./filters/Pixelate.js";import w from"./filters/Palette/index.js";import F from"./filters/Dither/index.js";import x from"./filters/Blur/index.js";export class Renderer{constructor(e){this.canvas=e,this.source=void 0,this.gl=void 0,this.filters=[],this.debug=!0;const r=e.getContext("webgl",{antialias:!1});if(!r)throw new Error("WebGL is not available");this.gl=r;const t=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,t);const a=[-1,1,1,1,-1,-1,1,-1];r.bufferData(r.ARRAY_BUFFER,new Float32Array(a),r.STATIC_DRAW),this.registerFilter(h),this.registerFilter(d),this.registerFilter(u),this.registerFilter(x),this.registerFilter(T),this.registerFilter(m),this.registerFilter(E),this.registerFilter(F),this.registerFilter(w),this.registerFilter(c)}registerFilter(e){const r=new e(this.gl);this.filters[r.name]=r,this.filters.push(r)}clear(e,r){const t=this.gl;t.viewport(0,0,e,r),t.clearColor(0,1,0,1),t.clear(t.COLOR_BUFFER_BIT),t.disable(t.BLEND),t.disable(t.DEPTH_TEST),t.disable(t.DITHER)}drawSource(){const{gl:e,source:r}=this;e.activeTexture(e.TEXTURE0);const t=g(e,r.width,r.height);e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,t),e.activeTexture(e.TEXTURE0)}draw(){const{gl:e,source:r,filters:t,debug:a}=this;if(!r)return;this.clear(e.drawingBufferWidth,e.drawingBufferHeight);let s=[o(e,r.width,r.height),o(e,r.width,r.height)];this.drawSource();const f=t.filter(({enabled:i})=>i);a&&console.group("draw");for(const i of f){a&&console.time(i.name);for(let l=0;l<i.pass;l++){e.bindFramebuffer(e.FRAMEBUFFER,s[0].buffer),i.use();const n=e.getUniformLocation(i.program,"pass");e.uniform1f(n,l),e.drawArrays(e.TRIANGLE_STRIP,0,4),e.bindTexture(e.TEXTURE_2D,s[0].texture),i.clear(),[s[0],s[1]]=[s[1],s[0]]}a&&console.timeEnd(i.name)}a&&console.groupEnd(),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindTexture(e.TEXTURE_2D,s[0].texture),e.drawArrays(e.TRIANGLE_STRIP,0,4);for(const i of s)e.deleteFramebuffer(i.buffer),e.deleteTexture(i.texture)}setSource(e){this.source=e,this.canvas.width=e.width,this.canvas.height=e.height,this.draw()}}export function create(e){return new Renderer(e)}
