import{LitElement as c,html as E,unsafeCSS as x}from"../../../../web_modules/lit-element.js";import p,{createArrayBuffer as h,createFramebuffer as B,createPlane as R,createProgram as d,createShader as o,createTexture as T,setUniforms as m,setAttribArray as u,enableExtensions as A}from"../../../utils/index.js";import b from"./histogram.js";import F from"./drawConstant.js";import w from"./noop.js";import _ from"./render.js";import v from"./styles.js";class P extends c{static get styles(){return x(v)}constructor(){super();this.canvas=document.createElement("canvas"),this.gl=void 0,this.infoProgram=void 0,this.renderProgram=void 0,this.binsBuffer=void 0,this.planeBuffer=void 0,this.indexesBuffer=void 0,this.indexes=new Float32Array(0),this.imageTexture=void 0,this.samplesCount=256,this.logaritmicScale=!1,this.draw=p(t=>{console.time("histogram"),this.setupImage(t),this.collectHistogramInfo(t),this.renderHistogram(),console.timeEnd("histogram")});const e=this.canvas.getContext("webgl");if(!e)throw new Error("WebGL is not available");A(e,["OES_texture_float"]),this.gl=e,this.infoProgram=d(e,o(e,e.VERTEX_SHADER,b),o(e,e.FRAGMENT_SHADER,F)),this.renderProgram=d(e,o(e,e.VERTEX_SHADER,w),o(e,e.FRAGMENT_SHADER,_)),this.binsBuffer=B(e,this.samplesCount,1,null,{type:e.FLOAT}),this.planeBuffer=h(e,R())}setupImage(e){const t=e.width*e.height;t!==this.indexes.length&&(this.indexes=new Float32Array(Array.from({length:t},(r,i)=>i)),this.gl.deleteTexture(this.imageTexture),this.gl.deleteBuffer(this.indexesBuffer),this.indexesBuffer=h(this.gl,this.indexes),this.imageTexture=T(this.gl,e.width,e.height,e))}collectHistogramInfo(e){const{gl:t,infoProgram:r,binsBuffer:i,imageTexture:a,indexes:n,indexesBuffer:l,samplesCount:s}=this;t.blendFunc(t.ONE,t.ONE),t.enable(t.BLEND),t.disable(t.DEPTH_TEST),t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.useProgram(r),t.bindBuffer(t.ARRAY_BUFFER,l),t.bindFramebuffer(t.FRAMEBUFFER,i.buffer),m(t,{resolution:[e.width,e.height],samplesCount:s}),u(t,"index",1),t.viewport(0,0,s,1),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(t.POINTS,0,n.length)}renderHistogram(){const{gl:e,renderProgram:t,canvas:r,binsBuffer:i,planeBuffer:a,samplesCount:n,logaritmicScale:l}=this,s=new Float32Array(n*1*4);e.readPixels(0,0,n,1,e.RGBA,e.FLOAT,s);let f=0;for(const g of s)f=Math.max(f,g);e.colorMask(!0,!0,!0,!0),e.blendFunc(e.ONE,e.ZERO),e.disable(e.BLEND),r.width=r.clientWidth,r.height=r.clientHeight,e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),e.bindBuffer(e.ARRAY_BUFFER,a),e.bindTexture(e.TEXTURE_2D,i.texture),e.bindFramebuffer(e.FRAMEBUFFER,null),e.useProgram(t),u(e,"position",2),m(e,{resolution:[1/e.drawingBufferWidth,1/e.drawingBufferHeight],logaritmicScale:l,maxValue:f}),e.drawArrays(e.TRIANGLE_STRIP,0,4)}render(){return E`${this.canvas}`}}customElements.define("pis-histogram",P);
