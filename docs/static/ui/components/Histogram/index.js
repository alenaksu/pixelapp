import{LitElement as B,html as x,unsafeCSS as R}from"../../../../_snowpack/pkg/lit-element.js";import{createArrayBuffer as c,createFramebuffer as E,createPlane as F,createProgram as g,createShader as o,createTexture as A,setUniforms as f,setAttribArray as d,enableExtensions as T,bindTexture as h,debounce as w}from"../../../utils/index.js";import{LineIcon as _,LightIcon as S}from"../../../../_snowpack/pkg/@spectrum-web-components/icons-workflow.js";import v from"./histogram.js";import I from"./drawConstant.js";import b from"./noop.js";import P from"./render.js";import M from"./maxValue.js";import V from"./styles.js";class L extends B{static get styles(){return R(V)}constructor(){super();this.canvas=document.createElement("canvas"),this.gl=void 0,this.infoProgram=void 0,this.renderProgram=void 0,this.maxValueProgram=void 0,this.binsBuffer=void 0,this.maxValueBuffer=void 0,this.planeBuffer=void 0,this.pointBuffer=void 0,this.indexesBuffer=void 0,this.pixelIds=new Float32Array(0),this.imageTexture=void 0,this.binsCount=256,this.logarithmicScale=!1,this.colorMode=!0,this.image=void 0,this.draw=w(t=>{console.time("histogram"),t&&this.setupImage(t),this.collectHistogramInfo(),this.computeMaxValue(),this.renderHistogram(),console.timeEnd("histogram")},200);const e=this.canvas.getContext("webgl",{depth:!1,stencil:!1});if(!e)throw new Error("WebGL is not available");T(e,["OES_texture_float"]),this.gl=e,e.disable(e.DEPTH_TEST),this.infoProgram=g(e,o(e,e.VERTEX_SHADER,v),o(e,e.FRAGMENT_SHADER,I)),this.renderProgram=g(e,o(e,e.VERTEX_SHADER,b),o(e,e.FRAGMENT_SHADER,P)),this.maxValueProgram=g(e,o(e,e.VERTEX_SHADER,b),o(e,e.FRAGMENT_SHADER,M)),this.binsBuffer=E(e,this.binsCount,1,null,{type:e.FLOAT}),this.maxValueBuffer=E(e,1,1,null,{type:e.FLOAT}),this.planeBuffer=c(e,F()),this.pointBuffer=c(e,new Float32Array([0,0]))}setupImage(e){const t=e.width*e.height;t!==this.pixelIds.length&&(this.pixelIds=new Float32Array(Array.from({length:t},(r,i)=>i)),this.gl.deleteTexture(this.imageTexture),this.gl.deleteBuffer(this.indexesBuffer),this.indexesBuffer=c(this.gl,this.pixelIds),this.imageTexture=A(this.gl,e.width,e.height,e)),this.image=e}collectHistogramInfo(){const{gl:e,infoProgram:t,binsBuffer:r,imageTexture:i,pixelIds:s,indexesBuffer:a,binsCount:u,colorMode:m,image:n}=this;e.enable(e.BLEND),e.blendFunc(e.ONE,e.ONE),h(e,i),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.useProgram(t),e.bindBuffer(e.ARRAY_BUFFER,a),e.bindFramebuffer(e.FRAMEBUFFER,r.buffer),f(e,{colorMode:m,resolution:[n.width,n.height],binsCount:u}),d(e,"index",1),e.viewport(0,0,u,1),e.clear(e.COLOR_BUFFER_BIT);for(let l=0;l<3;l++){const p=[l===0,l===1,l===2,!1];e.colorMask(...p),f(e,{mask:p.map(Number)}),e.drawArrays(e.POINTS,0,s.length)}e.colorMask(!0,!0,!0,!0),e.disable(e.BLEND),e.blendFunc(e.ONE,e.ZERO)}computeMaxValue(){const{gl:e,pointBuffer:t,maxValueBuffer:r,binsBuffer:i,maxValueProgram:s,binsCount:a}=this;e.useProgram(s),f(e,{binsCount:a}),e.bindBuffer(e.ARRAY_BUFFER,t),e.bindFramebuffer(e.FRAMEBUFFER,r.buffer),h(e,i.texture),d(e,"position",2),e.viewport(0,0,1,1),e.clear(e.COLOR_BUFFER_BIT),e.drawArrays(e.POINTS,0,1)}renderHistogram(){const{gl:e,renderProgram:t,canvas:r,binsBuffer:i,planeBuffer:s,logarithmicScale:a,maxValueBuffer:u,colorMode:m,binsCount:n}=this;r.width=r.clientWidth,r.height=r.clientHeight,e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),e.bindBuffer(e.ARRAY_BUFFER,s),h(e,i.texture,e.TEXTURE0),h(e,u.texture,e.TEXTURE1),e.bindFramebuffer(e.FRAMEBUFFER,null),e.useProgram(t),d(e,"position",2),f(e,{colorMode:m,resolution:[1/e.drawingBufferWidth,1/e.drawingBufferHeight],logarithmicScale:a,histogramInfo:0,maxValue:1,binsCount:n}),e.drawArrays(e.TRIANGLE_STRIP,0,4)}toggleLogScale(){this.logarithmicScale=!this.logarithmicScale,this.draw()}toggleColorMode(){this.colorMode=!this.colorMode,this.draw()}render(){return x`
            <sp-action-group id="options">
                <sp-action-button label="Linear/Logarithmic" @click=${this.toggleLogScale}>
                    <sp-icon slot="icon" size="xs">${_()}</sp-icon>
                </sp-action-button>
                <sp-action-button label="Color/Luma" @click=${this.toggleColorMode}>
                    <sp-icon slot="icon" size="xs">${S()}</sp-icon>
                </sp-action-button>
            </sp-action-group>
            ${this.canvas}
        `}}customElements.define("pis-histogram",L);
