import{luma as N}from"../utils/index.js";export function quantize(n,a){let o=0,e=0,t=0;for(const[l,s,I,h]of n)o+=l,e+=s,t+=I;o/=n.length,e/=n.length,t/=n.length;const r=[o,e,t,255].map(Math.round);return r}export function splitBucket(n,a,o=0){if(o===0||n.length===1)return[quantize(n,a)];const e=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],t=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],r=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];for(const[c,m,g]of n)e[0]=Math.min(e[0],c),e[1]=Math.max(e[1],c),t[0]=Math.min(t[0],m),t[1]=Math.max(t[1],m),r[0]=Math.min(r[0],g),r[1]=Math.max(r[1],g);const l=e[1]-e[0],s=t[1]-t[0],I=r[1]-r[0],h=Math.max(l,s,I),i=l===h?0:s===h?1:2;n.sort((c,m)=>c[i]-m[i]);const u=Math.ceil(n.length/2);return[...splitBucket(n.slice(0,u),a,o-1),...splitBucket(n.slice(u),a,o-1)]}export default function b(n,a=256){const o=[];for(let t=0;t<n.data.length;t+=4){const[r,l,s]=n.data.slice(t,t+4);o.push([r,l,s,t])}const e=splitBucket(o,n,Math.round(Math.log2(a)));return e.sort((t,r)=>N(t)-N(r)),e}
