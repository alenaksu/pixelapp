import{luma as g}from"../utils/index.js";export function quantize(n,e){let I=0,o=0,t=0;for(const[s,l,m,c]of n)I+=s,o+=l,t+=m;return I/=n.length,o/=n.length,t/=n.length,[I,o,t,255].map(Math.round)}export function splitBucket(n,e,I=0){if(I===0||n.length===1)return[quantize(n,e)];const o=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],t=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],r=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];for(const[a,N,u]of n)o[0]=Math.min(o[0],a),o[1]=Math.max(o[1],a),t[0]=Math.min(t[0],N),t[1]=Math.max(t[1],N),r[0]=Math.min(r[0],u),r[1]=Math.max(r[1],u);const s=o[1]-o[0],l=t[1]-t[0],m=r[1]-r[0],c=Math.max(s,l,m),h=s===c?0:l===c?1:2;n.sort((a,N)=>a[h]-N[h]);const i=Math.ceil(n.length/2);return[...splitBucket(n.slice(0,i),e,I-1),...splitBucket(n.slice(i),e,I-1)]}export default function T(n,e=256){const I=[];for(let t=0;t<n.data.length;t+=4){const[r,s,l]=n.data.slice(t,t+4);I.push([r,s,l,t])}const o=splitBucket(I,n,Math.round(Math.log2(e)));return o.sort((t,r)=>g(t)-g(r)),o}
