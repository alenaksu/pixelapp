import{iteratePixels as u,luma as h}from"../utils/index.js";function f(r,e){return e=7-e,(r[0]>>e&1)<<2|(r[1]>>e&1)<<1|r[2]>>e&1}class n{constructor(e){this.colorCount=e,this.root=void 0,this.levels=[],this.leaves=new Set,this.levels=Array.from({length:n.MAX_DEPTH},()=>[]),this.root=new d(0,this)}addColor(e){this.root.addColor(e)}addLevelNode(e,t){this.levels[t].push(e)}getPalette(){const{colorCount:e,levels:t,leaves:s}=this;for(let o=n.MAX_DEPTH-2;o>=0;o--){const i=[...t[o]].sort((l,a)=>l.getPixelCount()-a.getPixelCount());for(const l of i)if(l.mergeLeaves(),s.size<=e)break;if(s.size<=e)break;t[o].length=0}return[...s].map(o=>o.getColor())}}n.MAX_DEPTH=8;class d{constructor(e,t,s=null){this.level=e,this.tree=t,this.parent=s,this.color=[0,0,0,0],this.pixelCount=0,this.nodes=[],t.addLevelNode(this,e)}get isLeaf(){return this.pixelCount>0}get leafNodes(){if(this.isLeaf)return[this];const e=[];for(const t of this.nodes)t&&e.push(...t.leafNodes);return e}getPixelCount(){return this.isLeaf?this.pixelCount:this.nodes.reduce((e,t)=>t.getPixelCount()+e,0)}mergeLeaves(){const{nodes:e,tree:t}=this;if(!this.isLeaf){this.nodes=[];for(const s of e)s&&(this.sumColor(s.color,s.pixelCount),s.pixelCount=0,t.leaves.delete(s))}t.leaves.add(this)}sumColor(e,t=1){this.color[0]+=e[0],this.color[1]+=e[1],this.color[2]+=e[2],this.color[3]+=e[3],this.pixelCount+=t}addColor(e){const{nodes:t,level:s,tree:o}=this;if(s===n.MAX_DEPTH-1)this.sumColor(e),o.leaves.add(this);else{const i=f(e,s+1);if(!t[i]){const l=new d(s+1,o);t[i]=l}t[i].addColor(e)}}getColor(){return this.color.map(e=>Math.round(e/this.pixelCount))}removeNode(e){const t=this.nodes.indexOf(e);~t&&this.nodes.splice(t,1)}}export default function c(r,e){const t=new n(e);for(const[o]of u(r))t.addColor(o);const s=t.getPalette();return s.sort((o,i)=>h(o)-h(i)),s}
