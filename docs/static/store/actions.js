import{degToRad as n,rotatePoint as p,throttle as d}from"../utils/index.js";import{clone as i}from"../utils/store/index.js";import l from"./state.js";export default{setImageData(t,a){t.commit("setImageData",a)},saveSnapshot:d(t=>{t.commit("saveSnapshot",i(t.state.editParams)),t.commit("historyState")}),setEditParam(t,{name:a,value:o}){t.commit("setEditParam",{name:a,value:o}),t.commit("setCropParams")},resetEditParams(t){const a=i(l.editParams);t.commit("setEditParams",a),t.commit("saveSnapshot",i(a)),t.commit("historyState"),t.emit("updateui")},undo(t){t.state.history.canUndo&&(t.commit("undo"),t.commit("historyState"))},redo(t){t.state.history.canRedo&&(t.commit("redo"),t.commit("historyState"))},cropSetAdjusting(t,a){t.commit("setUIParams",{...t.state.ui,cropAdjusting:a})},cropTranslateBy(t,{x:a,y:o}){const s=t.state.editParams.crop;[a,o]=p(n(-(s.angle+s.rotate)),[a,o]);const m=s.translate[0]+a,e=s.translate[1]+o;t.commit("setCropParams",{translate:[m,e]})},cropScaleBy(t,a){const o=t.state.editParams.crop.scale,[s,m]=t.state.editParams.crop.translate,e=a*o+o,r=s/o*e,c=m/o*e;t.commit("setCropParams",{scale:e,translate:[r,c]})},cropSetAngle(t,a){t.commit("setCropParams",{angle:a})},cropSetScale(t,a){t.commit("setCropParams",{scale:a})},cropSetFlip(t,a){t.commit("setCropParams",{flip:a})}};
