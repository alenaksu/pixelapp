import{MimeTypes as x}from"./types.js";export function getPixel(n,r,e){const t=(r*e.width+n)*4;return[...e.data.slice(t,t+4)]}export function*iteratePixels(n){for(let r=0;r<n.width;r++)for(let e=0;e<n.height;e++){const t=(e*n.width+r)*4;yield[getPixel(r,e,n),r,e,t]}}export function toMatrix(n){const r=Array.from({length:n.height},()=>Array(n.width).fill(0));for(const[e,t,o]of iteratePixels(n))r[o][t]=e;return r}export function getPixelMatrix(n,r,e){const t=[];for(let o=-r;o<=r;o++){const i=[];for(let c=-r;c<=r;c++){const h=n+(c+o*e.width)*4,[s,u,d,a]=h in e.data?[...e.data.slice(h,h+3),255]:[0,0,0,0];i.push((s+u+d+a)/4)}t.push(i)}return t}export function luma(n){return n[0]*.2126+n[1]*.7152+n[2]*.722}export function loadImage(n,r=1024){return new Promise(e=>{const t=new Image;t.onload=()=>{const o=Math.min(r/(t.width>t.height?t.width:t.height),1),i=getImageData(t,t.width*o,t.height*o);e(i)},t.src=n})}export function getImageData(n,r=n.width,e=n.height){const t=document.createElement("canvas");t.width=r,t.height=e;const o=t.getContext("2d");o.imageSmoothingQuality="high",o.drawImage(n,0,0,t.width,t.height);const i=o.getImageData(0,0,t.width,t.height);return i}export function rgbToHsl(n,r,e){n/=255,r/=255,e/=255;const t=Math.max(n,r,e),o=Math.min(n,r,e);let i,c;const h=(t+o)/2;if(t==o)i=c=0;else{const s=t-o;c=h>.5?s/(2-t-o):s/(t+o);switch(t){case n:i=(r-e)/s+(r<e?6:0);break;case r:i=(e-n)/s+2;break;case e:i=(n-r)/s+4;break}i/=6}return[i,c,h]}export function hslToRgb(n,r,e){let t,o,i;if(r==0)t=o=i=e;else{const c=(u,d,a)=>(a<0&&(a+=1),a>1&&(a-=1),a<1/6?u+(d-u)*6*a:a<1/2?d:a<2/3?u+(d-u)*(2/3-a)*6:u),h=e<.5?e*(1+r):e+r-e*r,s=2*e-h;t=c(s,h,n+1/3),o=c(s,h,n),i=c(s,h,n-1/3)}return[Math.round(t*255),Math.round(o*255),Math.round(i*255)]}export function openFile(n=x.Image){return new Promise((r,e)=>{const t=document.createElement("input");t.type="file",t.accept=n,t.onchange=()=>{r(t.files.item(0))},t.onblur=e,t.click()})}export function rgbToHex(n,r=!0){const e=r?255:1;return`#${n.slice(0,3).map(t=>(t*e).toString(16).padStart(2,"0")).join("")}`}export function hexToRgb(n,r=!0){const e=r?255:1;return[parseInt(n.slice(1,3),16)/e,parseInt(n.slice(3,5),16)/e,parseInt(n.slice(5,7),16)/e,e]}
