import{iteratePixels as a,luma as l}from"../utils.js";function u(e,t){return t=7-t,(e[0]>>t&1)<<2|(e[1]>>t&1)<<1|e[2]>>t&1}class r{constructor(e){this.colorCount=e,this.root=void 0,this.levels=[],this.leaves=new Set,this.levels=Array.from({length:r.MAX_DEPTH},()=>[]),this.root=new d(0,this)}addColor(e){this.root.addColor(e)}addLevelNode(e,t){this.levels[t].push(e)}getPalette(){const{colorCount:e,levels:t,leaves:o}=this;for(let s=r.MAX_DEPTH-2;s>=0;s--){const i=[...t[s]].sort((n,h)=>n.getPixelCount()-h.getPixelCount());for(const n of i)if(n.mergeLeaves(),o.size<=e)break;if(o.size<=e)break;t[s].length=0}return[...o].map(s=>s.getColor())}}r.MAX_DEPTH=8;class d{constructor(e,t,o=null){this.level=e,this.tree=t,this.parent=o,this.color=[0,0,0,0],this.pixelCount=0,this.nodes=[],t.addLevelNode(this,e)}get isLeaf(){return this.pixelCount>0}get leafNodes(){if(this.isLeaf)return[this];const e=[];for(const t of this.nodes)t&&e.push(...t.leafNodes);return e}getPixelCount(){return this.isLeaf?this.pixelCount:this.nodes.reduce((e,t)=>t.getPixelCount()+e,0)}mergeLeaves(){const{nodes:e,tree:t}=this;if(!this.isLeaf){this.nodes=[];for(const o of e)o&&(this.sumColor(o.color,o.pixelCount),o.pixelCount=0,t.leaves.delete(o))}t.leaves.add(this)}sumColor(e,t=1){this.color[0]+=e[0],this.color[1]+=e[1],this.color[2]+=e[2],this.color[3]+=e[3],this.pixelCount+=t}addColor(e){const{nodes:t,level:o,tree:s}=this;if(o===r.MAX_DEPTH-1)this.sumColor(e),s.leaves.add(this);else{const i=u(e,o+1);if(!t[i]){const n=new d(o+1,s);t[i]=n}t[i].addColor(e)}}getColor(){return this.color.map(e=>Math.round(e/this.pixelCount))}removeNode(e){const t=this.nodes.indexOf(e);~t&&this.nodes.splice(t,1)}}export default function f(e,t){const o=new r(t);for(const[i]of a(e))o.addColor(i);const s=o.getPalette();return s.sort((i,n)=>l(i)-l(n)),s}
